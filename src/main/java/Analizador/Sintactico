/*
* Analizador
* Byron Orellana (el ByLy)
*/
package Analizador;
import java_cup.runtime.*; 
import java.util.ArrayList;
import Principal.*;

parser code 
{:

    /*
    clase nodo que va a tener lista de siguientes, lista de ultimos, si es hoja, el lexema, el tipo
clase arbol que va a tener nodo izquierdo y derecho y que va a actuar como ramificacion
clase expresion que va a guardar el arbol, y el identificador de la expresion
clae conjunto que va a guardar el nombre del conjunto, la lista de conjuntos y ya creo xD

*/


    public ArrayList<Expresion> Expresiones= new ArrayList<>();
    public ArrayList<Nodo> listaNodos= new ArrayList<>();
Expresion exp;
  public void errorSintactico(Symbol s){
      System.out.println("Error Sintactico en linea: "+s.left+ " Columna: "+s.right+" Error: "+s.value+" "+s.sym);
    }
  
  public void errorIrrecuperable(Symbol s) throws java.lang.Exception{
      System.out.println("Error sintactico sin posibilidad a reparacion en la linea: "+s.left+" Columna: "+s.right+" Error: "+s.value+" nno reconocido");
  }
:} 

terminal String PTCOMA;
terminal String RESCONJ;
terminal String LLAVEABIERTA;
terminal String DOSPUNTOS;
terminal String ASIGNADOR;
terminal String SEPARADOR;
terminal String COMA;
terminal String CONCATENACION;
terminal String DISYUNCION;
terminal String CERRADURAKLEENE;
terminal String CERRADURAPOSITIVA;
terminal String INTERROGACION;
terminal String SALTOLINEA;
terminal String COMILLASIMPLE;
terminal String COMILLADOBLE;
terminal String LLAVECERRADA;
terminal String IDENTIFICADOR;
terminal String CONJCAR;
terminal String CONJCOMAS;
terminal String CADENA;
terminal String CONJUNTOEXP;

non terminal ini;
non terminal instrucciones;
non terminal ArrayList contenido;
non terminal ArrayList conjuntos;
non terminal ArrayList validaciones;
non terminal ArrayList expresiones;
non terminal conjunto;
non terminal expresion;
non terminal validacion;
non terminal tipoConjunto;
non terminal ArrayList expReg;

start with ini;

ini::= instrucciones;

instrucciones::= LLAVEABIERTA contenido LLAVECERRADA;

contenido::= conjuntos expresiones SEPARADOR SEPARADOR validaciones;

conjuntos::= conjuntos conjunto
| conjunto;

expresiones::= expresiones expresion {:listaNodos=new ArrayList<>();:}
| expresion {:listaNodos=new ArrayList<>();:}
; 

validaciones::= validaciones validacion
| validacion;

conjunto::= RESCONJ DOSPUNTOS IDENTIFICADOR ASIGNADOR tipoConjunto PTCOMA;

expresion::= IDENTIFICADOR:a ASIGNADOR expReg:b PTCOMA {:Expresiones.add(new Expresion(a,b));main.principio.getListaExpresiones().add(new Expresion(a,b));:};

validacion::= IDENTIFICADOR DOSPUNTOS CADENA PTCOMA;

tipoConjunto::= CONJCOMAS
|CONJCAR;

expReg::= CERRADURAKLEENE:a expReg:e1  {:RESULT= e1;RESULT.add(0,new Nodo(a,"CERRADKLN"));listaNodos.add(new Nodo(a,"CERRADKLN"));:}

| CONCATENACION:a expReg:e1 expReg:e2  {:RESULT= e1;RESULT.addAll(e2);RESULT.add(0,new Nodo(a,"CONCA"));listaNodos.add(new Nodo(a,"CONCA"));:}

| DISYUNCION:a expReg:e1 expReg:e2  {:RESULT= e1; RESULT.addAll(e2);RESULT.add(0,new Nodo(a,"DISYUNC"));listaNodos.add(new Nodo("|","DISYUNC"));:}

| CERRADURAPOSITIVA:a expReg:e1 {:RESULT= e1;RESULT.add(0,new Nodo(a,"CERRADPOS")); listaNodos.add(new Nodo("+","CERRADPOS"));:}

| INTERROGACION:a expReg:e1 {:RESULT= e1;RESULT.add(0,new Nodo(a,"INTERROG")); :}

| SALTOLINEA:e {:RESULT= new ArrayList();RESULT.add(new Nodo(e,"LEXEMA"));:}
| COMILLASIMPLE:e {:RESULT= new ArrayList();RESULT.add(new Nodo(e,"LEXEMA"));:}
| COMILLADOBLE:e {:RESULT= new ArrayList(); RESULT.add(new Nodo(e,"LEXEMA"));:}
| CADENA:e {:RESULT= new ArrayList();RESULT.add(new Nodo(e,"LEXEMA")); :}
| CONJUNTOEXP:e {:RESULT= new ArrayList();RESULT.add(new Nodo(e,"LEXEMA"));:}
;

